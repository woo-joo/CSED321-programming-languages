
(fn x : int => x) 1; 

(fn x : int => y) 1; 

if false then b a else if false then b c else = (1,1);

case inl (int) 10 of inl a => + (a, 5) | inr b => - (b, 5);

let f : int -> int = fn x : int => x in f;

case inl (int) 10 of inl a => (case inl (int) a of inl b => a b c | inr c => a c d) | inr e => a e;

(fix f : int => (fn x : int => if = (x,1) then (fn x : int => x a b) x else f (-(x,1)))) 3 b;

let rec sum : int -> int = fn x : int => if (= (x, 1)) then 1 else + (x, sum (- (x, 1))) 
in (fn x : int => - (x,x)) (sum 10);

let or : bool -> bool -> bool = fn x : bool => fn y : bool => if x then true else y in
let add : int -> int -> int = fn x : int => fn y : int => + (x, y) in
let sub : int -> int -> int = fn x : int => fn y : int => - (x, y) in
let rec fib : int -> int = fn x : int => if or (= (x, 0)) (= (x, 1)) then 1 else add (fib (sub x 1)) (fib (sub x 2)) in
fib 10;

let rec evenOdd : ((int -> bool) * (int -> bool)) = 
(fn x : int => if (= (x, 0)) then true else ((snd evenOdd) (- (x, 1))), fn x : int => if (= (x, 0)) then false else ((fst evenOdd) (- (x, 1)))) in
(fst evenOdd) 18;

let not : bool -> bool = fn x : bool => if x then false else true in
let f : (int + bool) -> bool = fn x : (int + bool) => case x of inl x => = (x,
0) | inr b => not b in
let rec evenOdd : ((int -> bool) * (int -> bool)) =
(fn x : int => if f (inl (bool) x) then true else ((snd evenOdd) (- (x,
1))),
fn x : int => if not (f (inr (int) (= (x, 0)))) then false else ((fst
evenOdd) (- (x, 1)))) in
(fst evenOdd) 18;
